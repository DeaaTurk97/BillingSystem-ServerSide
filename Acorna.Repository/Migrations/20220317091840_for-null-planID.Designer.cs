// <auto-generated />
using System;
using Acorna.Repository.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Acorna.Repository.Migrations
{
    [DbContext(typeof(AcornaDbContext))]
    [Migration("20220317091840_for-null-planID")]
    partial class fornullplanID
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Acorna.Core.Entity.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Notification.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PhoneNumbersSubmitted"
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PhoneNumbersApproved"
                        },
                        new
                        {
                            Id = 30,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PhoneNumbersIprogress"
                        },
                        new
                        {
                            Id = 40,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PhoneNumbersRejected"
                        },
                        new
                        {
                            Id = 50,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BillUploaded"
                        },
                        new
                        {
                            Id = 60,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BillSubmitted"
                        },
                        new
                        {
                            Id = 70,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BillApproved"
                        },
                        new
                        {
                            Id = 80,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BillInProgress"
                        },
                        new
                        {
                            Id = 90,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BillRejected"
                        },
                        new
                        {
                            Id = 100,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BillPaid"
                        },
                        new
                        {
                            Id = 110,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chatting"
                        },
                        new
                        {
                            Id = 120,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ServicesSubmitted"
                        },
                        new
                        {
                            Id = 130,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ServicesApproved"
                        },
                        new
                        {
                            Id = 140,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ServicesInProgress"
                        },
                        new
                        {
                            Id = 150,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ServicesRejected"
                        },
                        new
                        {
                            Id = 160,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NewServiceAdded"
                        },
                        new
                        {
                            Id = 170,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ServiceRemoved"
                        },
                        new
                        {
                            Id = 180,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ServicePriceGraterThanServicePlan"
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Notification.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceMassageId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Notification.NotificationsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationsId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NotificationsId");

                    b.ToTable("NotificationsDetails");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.AllocatedUsersService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceUsedId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceUsedId");

                    b.HasIndex("UserId");

                    b.ToTable("AllocatedUsersServices");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerminal")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusBillId")
                        .HasColumnType("int");

                    b.Property<bool>("SubmittedByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("SubmittedByUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.BillDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CallDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CallDiscountPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("CallDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("CallNetPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("CallRetailPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataUsage")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsServiceUsedNeedApproved")
                        .HasColumnType("bit");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneBookId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ServiceUsedId")
                        .HasColumnType("int");

                    b.Property<int>("StatusServiceUsedBy")
                        .HasColumnType("int");

                    b.Property<int>("StatusServiceUsedId")
                        .HasColumnType("int");

                    b.Property<int>("TypePhoneNumberId")
                        .HasColumnType("int");

                    b.Property<int>("TypeServiceUsedId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.CallDetailsDTO", b =>
                {
                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("BillMonth")
                        .HasColumnType("int");

                    b.Property<int>("BillYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CallDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CallDiscountPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("CallDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CallRetailPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("DialledNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceUsedId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceUsedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceUsedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceUsedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypePhoneNumberAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypePhoneNumberEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypePhoneNumberId")
                        .HasColumnType("int");

                    b.Property<string>("TypePhoneNumberName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeServiceUsedId")
                        .HasColumnType("int");

                    b.Property<string>("TypeServiceUsedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeServiceUsedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeServiceUsedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CallDetails");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.CallFinanceDTO", b =>
                {
                    b.Property<decimal>("FreeServicesSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("OfficialServicesSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("PersonalServicesSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnknownServicesSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CallFinance");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.CallSummaryDTO", b =>
                {
                    b.Property<decimal>("FixedAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("FreeSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("OfficialSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("PersonalSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnknownSum")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CallSummary");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryKey")
                        .HasColumnType("int");

                    b.Property<string>("CountryNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PricePerMinute")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GovernorateNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GovernorateNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Governorate");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("GroupNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupNameAr = "الإدارة",
                            GroupNameEn = "Administration"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupNameAr = "الموظفين",
                            GroupNameEn = "Employees"
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OldUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("JobNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperatorKey")
                        .HasColumnType("int")
                        .HasMaxLength(150);

                    b.Property<string>("OperatorNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("OperatorNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.PhoneBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonalUserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<string>("PhoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ReferanceNotificationId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<int>("StatusAdminId")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<int>("StatusNumberId")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<int>("TypePhoneNumberId")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PhonesBook");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.PlanService", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceUsedId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("AdditionalUnitPrice")
                        .HasColumnType("real");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float>("Limit")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PlanId", "ServiceUsedId");

                    b.HasIndex("ServiceUsedId");

                    b.ToTable("PlanService");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.ServiceUsed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCalculatedValue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("NonOfficial")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceUsedNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ServiceUsedNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServicesUsed");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCalculatedValue = false,
                            IsNeedApproved = false,
                            NonOfficial = false,
                            ServiceUsedNameAr = "فارغ",
                            ServiceUsedNameEn = "Empty"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCalculatedValue = false,
                            IsNeedApproved = false,
                            NonOfficial = false,
                            ServiceUsedNameAr = "EBU_حزمة",
                            ServiceUsedNameEn = "EBU_Bundel"
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.SimCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SimCardTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Voice"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Data"
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.SimProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SimProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileName = "Activated"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileName = "Deactivate"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileName = "Stock"
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.TypePhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TypePhoneNumber");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeNameAr = "مجاني",
                            TypeNameEn = "Free"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeNameAr = "رسمي",
                            TypeNameEn = "Official"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeNameAr = "شخصي",
                            TypeNameEn = "Personal"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeNameAr = "غير معرف",
                            TypeNameEn = "Unknown"
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("PowerLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "efacdda1-8fd9-44d7-8dcc-c99185ea08ae",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            PowerLevel = 99
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "9e45e2f8-a6bc-476f-a98d-811bf779532e",
                            Name = "AdminGroup",
                            NormalizedName = "ADMINGROUP",
                            PowerLevel = 98
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "1a09c3ac-cbcf-4181-a4af-07f071c0e50c",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            PowerLevel = 97
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "db69fa0f-a868-4c4d-bf01-ff33365d43b4",
                            Name = "Finance",
                            NormalizedName = "FINANCE",
                            PowerLevel = 96
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte>("City")
                        .HasColumnType("tinyint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Country")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailOtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FixedAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpEmailExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SimCardTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SimProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PlanId");

                    b.HasIndex("SimCardTypeId");

                    b.HasIndex("SimProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            City = (byte)0,
                            ConcurrencyStamp = "650f6f0b-bdd4-4943-8d76-e2aca7a6ae40",
                            Country = (byte)0,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SuperAdmin@a.com",
                            EmailConfirmed = false,
                            FixedAmount = 0m,
                            GroupId = 1,
                            IsActive = true,
                            LanguageId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@A.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7NPbHs3ckSnuXqTFDQKXrVs38RRQ3YRVtcJ+DJNTljDBQbLc7ufnx9Vb7MeocmVA==",
                            PhoneNumber = "superAdmin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fe3d32f-8939-4fc0-b0a0-eedd04998092",
                            SimCardTypeId = 1,
                            SimProfileId = 1,
                            TwoFactorEnabled = false,
                            UserName = "superAdmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            City = (byte)0,
                            ConcurrencyStamp = "9211f3b5-b89d-401c-b4f5-115c23f3e781",
                            Country = (byte)0,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AdminGroup@a.com",
                            EmailConfirmed = false,
                            FixedAmount = 0m,
                            GroupId = 1,
                            IsActive = true,
                            LanguageId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINGROUP@A.COM",
                            NormalizedUserName = "ADMINGROUP",
                            PasswordHash = "AQAAAAEAACcQAAAAEHR7FW5Q64jgzZ7NLY9AK2Rvj11MgAVJaQF/b0uSy1dApECqtwSFlvth0FMdZUBIng==",
                            PhoneNumber = "adminGroup",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc4e0dfa-5897-44b0-be48-b3bed2506ba0",
                            SimCardTypeId = 1,
                            SimProfileId = 1,
                            TwoFactorEnabled = false,
                            UserName = "adminGroup"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            City = (byte)0,
                            ConcurrencyStamp = "8ef318ba-8c33-44d0-8a1d-44485c5b5b90",
                            Country = (byte)0,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Employee@a.com",
                            EmailConfirmed = false,
                            FixedAmount = 0m,
                            GroupId = 2,
                            IsActive = true,
                            LanguageId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@A.COM",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJiCFuNdw7jhmamMglHwnJgnIB/tSRv8GDE0vrtVG5L7ow/641ZlGD1hZhbMLqEIwQ==",
                            PhoneNumber = "employee",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "598ded79-c2c9-4184-8ace-bedc6c70ed43",
                            SimCardTypeId = 1,
                            SimProfileId = 1,
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.Security.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.SystemDefinition.GeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("SettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GeneralSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SettingName = "default_image",
                            SettingValue = ""
                        });
                });

            modelBuilder.Entity("Acorna.Core.Entity.SystemDefinition.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageDefaultDisply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageDirection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LanguageFlag")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 3, 17, 12, 18, 39, 596, DateTimeKind.Local).AddTicks(2716),
                            LanguageCode = "AR",
                            LanguageDefaultDisply = "العربية",
                            LanguageDirection = "RTL",
                            LanguageFlag = ""
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2022, 3, 17, 12, 18, 39, 600, DateTimeKind.Local).AddTicks(9196),
                            LanguageCode = "EN",
                            LanguageDefaultDisply = "English",
                            LanguageDirection = "LTR",
                            LanguageFlag = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Acorna.Core.Entity.Notification.Notifications", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Notification.NotificationType", null)
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Notification.NotificationsDetails", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Notification.Notifications", null)
                        .WithMany("NotificationsDetails")
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.AllocatedUsersService", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.ServiceUsed", "ServiceUsed")
                        .WithMany("AllocatedUsersServices")
                        .HasForeignKey("ServiceUsedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acorna.Core.Entity.Security.User", "User")
                        .WithMany("AllocatedUsersServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Bill", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.BillDetails", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.Bill", null)
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.Governorate", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Project.BillingSystem.PlanService", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.Plan", "Plan")
                        .WithMany("PlanServices")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.ServiceUsed", "ServiceUsed")
                        .WithMany("PlanServices")
                        .HasForeignKey("ServiceUsedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Security.User", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acorna.Core.Entity.SystemDefinition.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.Plan", "Plan")
                        .WithMany("User")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.SimCardType", "SimCardType")
                        .WithMany()
                        .HasForeignKey("SimCardTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acorna.Core.Entity.Project.BillingSystem.SimProfile", "SimProfile")
                        .WithMany()
                        .HasForeignKey("SimProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Acorna.Core.Entity.Security.UserRole", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Security.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Acorna.Core.Entity.Security.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Security.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Acorna.Core.Entity.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
